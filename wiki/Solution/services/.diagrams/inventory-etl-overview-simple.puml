@startuml
left to right direction
package "EventHubs" as EventBusIn <<cloud>>{
    class "availability.updated.success" as AvailabilityUpsert <<(E,lightblue) event>> {
        type: delta
    }

    class "availability.deleted.success" as AvailabilityDelete <<(E,lightblue) event>>{
      type: notice
  }

    class "availability.checkout.success" as AvailabilityDecrement <<(E,lightblue) event>>{
          type: notice
      }
    class "availability.return.success" as AvailabilityIncrement <<(E,lightblue) event>>{
          type: notice
      }
}

package HTTP <<cloud>> {
    class "GET /{productId}/{libraryId}" as Get <<(B,lightblue) TCP>>
    class "GET /{productId}" as GetByProductID <<(B,lightblue) TCP>>
}
package Endpoints {
    package Subscribers {
        class "Delete" as DeleteSub <<(H,lightgreen) handler>>
        class "Increment" as IncrementSub <<(H,lightgreen) handler>>
        class "Upsert" as UpsertSub <<(H,lightgreen) handler>>
    }
    package Http {
        class Get <<(H,lightgreen) handler>>
        class GetByProductID <<(H,lightgreen) handler>>
    }
}

package domain {
    package useCases {
        class Increment <<(U,pink) use case>>
        class Upsert <<(U,pink) use case>>
        class Delete <<(U,pink) use case>>
        class Get <<(U,pink) use case>>
        class GetByProduct <<(U,pink) use case>>
    }
    package Entities {
        class Inventory <<(D, yellow) business entity>>
        class InventoryShort<<(D, yellow) business entity>>
    }
}




package DataProviders {
    package Database {
        class Repo <<D, lightgreen>>
        class Entities <<D, lightgreen>>
        }
        
    package EventBus {
        class "inventory.updated.success" as InventoryChange <<(E,lightblue) event>>
    }
}

package SqlServer <<cloud>> {
    class bt_alias <<(T, lightblue)>>

    class inventory <<T, lightblue)>>

}

package EventHubs <<cloud>> {
}

AvailabilityUpsert --> UpsertSub
AvailabilityDelete --> DeleteSub
AvailabilityIncrement --> IncrementSub
AvailabilityDecrement --> IncrementSub

UpsertSub --> Upsert
DeleteSub --> Delete
IncrementSub --> Increment

Delete ---> DataProviders.EventBus.InventoryChange
Upsert --> DataProviders.EventBus.InventoryChange
Increment --> DataProviders.EventBus.InventoryChange

HTTP.Get *--> Endpoints.Http.Get
HTTP.GetByProductID *--> Endpoints.Http.GetByProductID
Endpoints.Http.Get *--> domain.useCases.Get
Endpoints.Http.GetByProductID *--> domain.useCases.GetByProduct

Database *--> SqlServer
Repo <-u-* domain.useCases: via interface
Repo *-l->DataProviders.Database.Entities
DataProviders.Database.Entities *--> SqlServer.bt_alias
DataProviders.Database.Entities *--> SqlServer.inventory
InventoryChange --> EventHubs

@enduml